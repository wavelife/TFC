/*
 * This is the file implementation for the printf module using UART output
 * @Author: Carles Saura
 */
#include "printf.h"
/* CLib includes */
#include <stdint.h>
#include <stdio.h>
#include <stdarg.h>
/* LPC includes */
#include "LPC17xx.h"
#include "uart.h"

extern volatile uint32_t UART0Count, UART1Count, UART2Count, UART3Count;
extern volatile uint8_t UART0Buffer, UART1Buffer, UART2Buffer, UART3Buffer;
volatile uint32_t *lpc_uart_ier;
volatile uint32_t *uart_count;
volatile uint8_t *uart_buffer;
uint8_t uart_port;
int printfSem = 0;

/*-----------------------------------------------------------*/
/*
 * Simple function to init the baud rate and port of the UART.
 */
void printfStart( uint8_t  port, uint32_t baudrate){
	/* opening port */
	UARTInit(port, baudrate);
	/* Setting global variables */
	uart_port = port;
	switch(port){
	case 0: lpc_uart_ier = &LPC_UART0->IER;
		uart_count = &UART0Count;
		uart_buffer = &UART0Buffer;
		break;
	case 1: lpc_uart_ier = &LPC_UART1->IER;
		uart_count = &UART1Count;
		uart_buffer = &UART1Buffer;
		break;
	case 2: lpc_uart_ier = &LPC_UART2->IER;
		uart_count = &UART2Count;
		uart_buffer = &UART2Buffer;
		break;
	default:
	case 3: lpc_uart_ier = &LPC_UART3->IER;
		uart_count = &UART3Count;
		uart_buffer = &UART3Buffer;
		break;
	}
}

/*
 * Simple function to write to the UART.
 */
void printfSend(char* str, int bufsz){
	if (bufsz > BUFSIZE) bufsz = BUFSIZE;			/* This is to prevent buffer overflow */

	while( printfSem == 1 ){			/* Send 0 bytes to do something until finish wait */
		delayMs(5);//UARTSend(uart_port, (uint8_t *)str , 0 );
	}
	printfSem = 1;			/* Protect the module from other invocations */
	*lpc_uart_ier = IER_THRE | IER_RLS;				/* Disable RBR */
	UARTSend(uart_port, (uint8_t *)str , bufsz );
	*uart_count = 0;
	*lpc_uart_ier = IER_THRE | IER_RLS | IER_RBR;		/* Re-enable RBR */
	printfSem = 0;			/* Enable the module to other invocations */
}

/*
 * Simple function to format a string.
 */
void printfPrint(char* str, const char* format, ...){
	int bufsz;
	va_list listPointer;
	/* This is used to transmit the variable parameters */
	va_start( listPointer, format );
	bufsz = vsprintf(str, format, listPointer);
	va_end( listPointer );
	printfSend( str, bufsz);
}

/*
 * Simple function to format a string using va_list as a input.
 */
void printfVsprint(char* str, const char* format, va_list listPointer){
	int bufsz;
	bufsz = vsprintf(str, format, listPointer);
	printfSend( str, bufsz);
}


/*
 * Simple function to read from the UART.
 */
uint32_t printfScanscanf(char* string, uint32_t timeout){
	uint32_t oldCount = 0, newCount = 0;
	while( printfSem == 1 ){			/* Wait if someone is using another instance */
		delayMs(5);
	}

	//printfSem = 1;			/* Protect the module from other invocations */
	*uart_count = 0; // clean buff
	*lpc_uart_ier = IER_THRE | IER_RLS | IER_RBR; // enable interrupt RX UART

	delayMs(timeout); // wait sometime for receive some commands
	do{
		oldCount = newCount;
		delayMs(5);
		newCount = *uart_count;
	}while(oldCount != newCount); // wait a little time while we have new chars
	*lpc_uart_ier = IER_THRE | IER_RLS; // disable interrupt RX UART
	if(newCount==0) return 0;
	strncpy(string, (char*)&UART3Buffer, newCount );
	string[newCount] = 0; // add end string. Now we have a string clearBuffUart(3);
	*uart_count = 0; // clean buff
	printfSem = 0;			/* Enable the module to other invocations */

	return newCount;
}
/*
 * Simple function wait the amount of ms given in parameter 'ms0.
 */
#pragma GCC push_options
#pragma GCC optimize ("O0")
void delayMs( uint32_t ms){
	// 7140 iterations are 1ms aprox (it's a vulgar implementation)
	int i;
	for(i = 0; i < ( ((uint32_t)7140)*ms); i++){ ;
	}

}
#pragma GCC pop_options
/*-----------------------------------------------------------*/
